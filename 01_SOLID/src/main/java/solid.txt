Single Responsibility Principle 
	
	(SRP) ဆိုတာ Object-Oriented Programming (OOP) မှာရှိတဲ့ SOLID ဒီဇိုင်းမူတစ်ခုဖြစ်ပါတယ်။ 
ဒီမူက ပြောတာက "တစ်ခုတည်းသော တာဝန်ယူမှု" ဆိုတဲ့ အဓိပ္ပါယ်ပါ။ ဆိုလိုတာက တစ်ခုတည်းသော class တစ်ခု၊ 
သို့မဟုတ် module တစ်ခုဟာ တစ်ခုတည်းသော ရည်ရွယ်ချက် ဒါမှမဟုတ် တာဝန်တစ်ခုကိုပဲ ထမ်းဆောင်သင့်တယ်။ ဒါကြောင့် အဲဒီ class ကို ပြောင်းလဲရတဲ့ အကြောင်းအရင်းတစ်ခုထဲပဲ ရှိသင့်တယ်လို့ ဆိုလိုပါတယ်။

SRP ရဲ့ အကျိုးကျေးဇူးတွေကတော့:

ပိုမိုလွယ်ကူတဲ့ ထိန်းသိမ်းမှု - တာဝန်တစ်ခုတည်းကိုပဲ အာရုံစိုက်တာမို့ ကုဒ်ကို နားလည်ရ ပိုလွယ်ပါတယ်။
ပြန်သုံးနိုင်မှု - Class တစ်ခုက သီးသန့်လုပ်ဆောင်ချက်တစ်ခုပဲ ရှိရင် အခြား နေရာမှာ ပြန်သုံးဖို့ လွယ်ကူပါတယ်။
ပြောင်းလဲမှု သက်ရောက်မှု နည်းပါးစေခြင်း - တစ်ခြား လုပ်ဆောင်ချက်တွေကို ထိခိုက်မှု မရှိဘဲ ပြင်ဆင်နိုင်ပါတယ်။
=============================================================================================================================

Open/Closed Principle 

	Open / Closed Principle ဟာ SOLID ဒီဇိုင်းသဘောတရားတွေထဲက တစ်ခုဖြစ်ပြီး Robert C. Martin (Uncle Bob) က ဖော်ပြခဲ့တာပါ။ ဒီသဘောတရားရဲ့ အဓိကအချက်ကတော့:
"Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification."
ဆိုလိုတာက ကိုယ့်ရဲ့ ကုဒ်ကို ပြင်ဆင်မွမ်းမံစရာမလိုပဲ အသစ်ထပ်ဖြည့်လို့ရအောင် ရေးသင့်တယ်ဆိုတဲ့သဘောပါ။ ဒါမှ ရှိပြီးသား ကုဒ်ကို မပြင်ရဘဲ လုပ်ဆောင်ချက်သစ်တွေ ထပ်ဖြည့်နိုင်မှာဖြစ်တယ်။

=============================================================================================================================

Liskov Substitution Principle 
	
	(LSP) ဆိုတာက Object-Oriented Programming (OOP) မှာ SOLID ဒီဇိုင်းမူဝါဒတွေထဲက တစ်ခုဖြစ်ပြီး Barbara Liskov ဆိုတဲ့ ပညာရှင်က ၁၉၈၇ ခုနှစ်မှာ ပထမဆုံး မိတ်ဆက်ခဲ့တာပါ။ 
	ဒီမူက အဓိကအားဖြင့် inheritance (အမွေဆက်ခံခြင်း) ကို ဘယ်လိုမှန်ကန်စွာ အသုံးပြုရမလဲဆိုတာကို လမ်းညွှန်ပေးတဲ့ စည်းမျဉ်းတစ်ခုပါ။
Liskov Substitution Principle ရဲ့ အဓိက အချက်
LSP ကို ရိုးရှင်းစွာ ဖော်ပြရရင် အောက်ပါအတိုင်းပါပဲ။
"အကယ်၍ S ဆိုတဲ့ subtype ဟာ T ဆိုတဲ့ type ရဲ့ အမွေဆက်ခံတဲ့ အရာတစ်ခု (subclass) ဖြစ်တယ်ဆိုရင်၊ 
T ကို အသုံးပြုထားတဲ့နေရာမှာ S ကို အစားထိုးသုံးလို့ ရရမယ်၊ ပြီးတော့ အဲဒီအစားထိုးမှုက ပရိုဂရမ်ရဲ့ မှန်ကန်မှု (correctness) ကို ထိခိုက်မှာ မဟုတ်ရဘူး။"
ဆိုလိုတာက superclass ကို အသုံးပြုထားတဲ့ နေရာမှာ subclass ကို အစားထိုးသုံးလို့ရပြီး အဲဒီအစားထိုးမှုက ကုဒ်ရဲ့ အလုပ်လုပ်ပုံကို မထိခိုက်စေရဘူး။
=============================================================================================================================

Interface Segregation Principle 

	(ISP) ဆိုတာကတော့ SOLID ဒီဇိုင်းသဘောတရားတွေထဲက တစ်ခုဖြစ်ပြီး၊ 
ကိုယ့်ရဲ့ software ဒီဇိုင်းမှာ client (သုံးတဲ့သူ ဒါမှမဟုတ် class) တွေကို သူတို့ မလိုအပ်တဲ့ interface တွေ အတင်းအကျပ် သုံးခိုင်းတာမျိုး မဖြစ်သင့်ဘူးဆိုတဲ့ အချက်ပါ။ 
အဓိပ္ပာယ်ကတော့ interface တစ်ခုက သူ့ကို သုံးမယ့် client တွေအတွက် လိုအပ်တဲ့ method တွေပဲ ပါဝင်သင့်တယ်၊ အပိုတွေ မပါသင့်ဘူးပေါ့။ 
ဒါမှ client တွေက သူတို့ မလိုအပ်တဲ့ functionality တွေကို implement လုပ်ရမှာ မဟုတ်ဘူး။

==============================================================================================================================
Dependency Inversion Principle

	ဒီ Principle ရဲ့ အဓိက ရည်ရွယ်ချက်ကတော့ ကိုယ့် ကုဒ်တွေကို ပိုပြီး ပြောင်းလွယ်ပြင်လွယ် (Flexible)၊ ထိန်းသိမ်းရလွယ်ကူ (Maintainable) ဖြစ်အောင် လုပ်ဖို့ပါ။

	Dependency Inversion Principle မှာ အဓိက အချက် ၂ ချက်ပါတယ်:
		High-level modules တွေဟာ Low-level modules တွေကို မမှီခိုသင့်ပါဘူး - သူတို့နှစ်ခုစလုံးက Abstraction တွေကို မှီခိုသင့်တယ်။
		Abstractions တွေက Details တွေကို မမှီခိုသင့်ပါဘူး - အပြန်အလှန်အားဖြင့် Details တွေက Abstractions တွေကို မှီခိုရမယ်။
	အလွယ်ပြောရရင် ကိုယ့် ကုဒ်ရဲ့ အစိတ်အပိုင်းတွေကို တစ်ခုနဲ့တစ်ခု တိုက်ရိုက် ချိတ်မထားဘဲ Interface ဒါမှမဟုတ် Abstract Class တွေကတစ်ဆင့် ချိတ်ဆက်တာကို ဆိုလိုတာပါ။
	
===============================================================================================================================










